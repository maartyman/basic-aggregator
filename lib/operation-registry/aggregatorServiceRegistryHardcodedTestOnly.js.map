{"version":3,"file":"aggregatorServiceRegistryHardcodedTestOnly.js","sourceRoot":"","sources":["aggregatorServiceRegistryHardcodedTestOnly.ts"],"names":[],"mappings":";;;AAIA,MAAa,0CAA0C;IACrC,gBAAgB,CAAmB;IACnC,kBAAkB,CAAsB;IAExD,YAAmB,kBAAuC,EAAE,gBAAkC;QAC5F,IAAI,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;QAC7C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;IAC3C,CAAC;IAEM,KAAK,CAAC,kBAAkB;QAC7B,MAAM,OAAO,CAAC,GAAG,CACf,IAAI,CAAC,kBAAkB,CAAC,GAAG,CACzB,KAAK,EAAC,iBAAiB,EAAiB,EAAE,CAAC,iBAAiB,CAAC,UAAU,EAAE,CAC1E,CACF,CAAC;IACJ,CAAC;IAEM,KAAK,CAAC,GAAG,CAAC,SAAoB;QACnC,MAAM,SAAS,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC;QAEjD,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAC3C,KAAK,EAAC,iBAAiB,EAAiB,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,IAAI,CAC/E,CAAC,UAAU,EAAQ,EAAE;YACnB,IAAI,UAAU,CAAC,QAAQ,EAAE;gBACvB,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC5B;QACH,CAAC,CACF,CACF,CAAC,CAAC;QAEH,IAAI,eAAe,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;QACtC,OAAO,eAAe,KAAK,SAAS,IAAI,eAAe,CAAC,eAAe,KAAK,SAAS,EAAE;YACrF,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC1B,OAAO,SAAS,CAAC;aAClB;YACD,eAAe,GAAG,SAAS,CAAC,GAAG,EAAE,CAAC;SACnC;QAED,OAAO,eAAe,CAAC,eAAe,CAAC;IACzC,CAAC;CACF;AAxCD,gGAwCC","sourcesContent":["import type { AggregatorService, Operation, OperationResult } from '../aggregator-services/aggregatorService';\nimport type { CostQueueFactory } from '../cost-queue/CostQueue';\nimport type { AggregatorServiceRegistry } from './aggregatorServiceRegistry';\n\nexport class AggregatorServiceRegistryHardcodedTestOnly implements AggregatorServiceRegistry {\n  public readonly costQueueFactory: CostQueueFactory;\n  public readonly aggregatorServices: AggregatorService[];\n\n  public constructor(aggregatorServices: AggregatorService[], costQueueFactory: CostQueueFactory) {\n    this.aggregatorServices = aggregatorServices;\n    this.costQueueFactory = costQueueFactory;\n  }\n\n  public async initializeServices(): Promise<void> {\n    await Promise.all(\n      this.aggregatorServices.map(\n        async(aggregatorService): Promise<void> => aggregatorService.initialize(),\n      ),\n    );\n  }\n\n  public async run(operation: Operation): Promise<OperationResult | undefined> {\n    const costQueue = this.costQueueFactory.create();\n\n    await Promise.all(this.aggregatorServices.map(\n      async(aggregatorService): Promise<void> => aggregatorService.test(operation).then(\n        (testResult): void => {\n          if (testResult.runnable) {\n            costQueue.push(testResult);\n          }\n        },\n      ),\n    ));\n\n    let operationResult = costQueue.pop();\n    while (operationResult === undefined || operationResult.operationResult === undefined) {\n      if (costQueue.length === 0) {\n        return undefined;\n      }\n      operationResult = costQueue.pop();\n    }\n\n    return operationResult.operationResult;\n  }\n}\n"]}